

# This file was *autogenerated* from the file fq-pge.sage
from sage.all_cmdline import *   # import sage library

_sage_const_7 = Integer(7); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)

# Program
prog = MixedIntegerLinearProgram()

# Constants
m = _sage_const_7 
n = _sage_const_7 
q = _sage_const_3 
A = random_matrix(GF(q),m,n)
list_A = [[Integer(A[i][j]) for j in range(n)] for i in range(m)]
print(list_A)
sig = _sage_const_2 

print(A)

# Variables
x = prog.new_variable(integer=True, nonnegative=True)
p = prog.new_variable(integer=True, nonnegative=True)
k = prog.new_variable(integer=True, nonnegative=True)
r = prog.new_variable(integer=True, nonnegative=True) # remainder

# Constraints

r.set_max(q-_sage_const_1 )
x.set_max(q-_sage_const_1 )
p.set_max(q-_sage_const_1 )

# x submatrix diagonal = 1
for i in range(sig+_sage_const_1 ):
        prog.add_constraint(x[m-i,n-i] == _sage_const_1 )

# x last sigma columns all zero except in diagonal
for i in range(_sage_const_1 ,m+_sage_const_1 ):
    for j in range(n-sig,n+_sage_const_1 ):
        if i in range(m-sig,m+_sage_const_1 ) and i == j:
            continue
        else:
            prog.add_constraint(x[i,j] == _sage_const_0 )

# every row must be linear combination of itself
for i in range(_sage_const_1 ,m+_sage_const_1 ):
        prog.add_constraint(p[i,i] >= _sage_const_1 )

# Check if linear combination is odd (1 in GF(2)) or even(0 in GF(2))
for i in range(_sage_const_1 ,m+_sage_const_1 ):
    for j in range(_sage_const_1 ,n+_sage_const_1 ):
        prog.add_constraint(prog.sum(list_A[k-_sage_const_1 ][j-_sage_const_1 ]*p[i,k] for k in range(_sage_const_1 ,m+_sage_const_1 )) == q*k[i,j] + r[i,j])

# x linear combination of rows
for i in range(_sage_const_1 ,m+_sage_const_1 ):
    for j in range(_sage_const_1 ,n+_sage_const_1 ):
        prog.add_constraint(x[i,j] == r[i,j]) # Attento a somma


# Objective function
prog.set_objective(_sage_const_0 )

try:
    prog.solve(log=_sage_const_2 )
    X = Matrix(GF(q),m,n)
    P = Matrix(GF(q),m,n)

    for i in range(m):
        for j in range(n):
            X[i,j]=prog.get_values(x)[i+_sage_const_1 ,j+_sage_const_1 ]

    for i in range(m):
        for j in range(m):
            P[i,j]=prog.get_values(p)[i+_sage_const_1 ,j+_sage_const_1 ]

    print("=====ORIGINAL MATRIX=====")
    print()
    print(A)
    print()
    print("=====POST-PGE MATRIX=====")
    print()
    print(P*A)
except:
    print("Left {sig} columns rank too low")


