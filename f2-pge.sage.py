

# This file was *autogenerated* from the file f2-pge.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10 = Integer(10); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)

# Program
prog = MixedIntegerLinearProgram()

# Variables
x = prog.new_variable(binary=True)
p = prog.new_variable(binary=True)
b = prog.new_variable(binary=True)
k = prog.new_variable(integer=True)
d = prog.new_variable(integer=True)

# Constants
m = _sage_const_10 
n = _sage_const_10 
A = random_matrix(GF(_sage_const_2 ),m,n)
sig = _sage_const_4 

# Constraints

# x submatrix diagonal = 1
for i in range(sig+_sage_const_1 ):
        prog.add_constraint(x[m-i,n-i] == _sage_const_1 )

# x last sigma columns have only one 1
for j in range(n-sig,n+_sage_const_1 ):
        prog.add_constraint(prog.sum(x[i,j] for i in range(_sage_const_1 ,m+_sage_const_1 )) == _sage_const_1 )

# every row must be linear combination of itself
for i in range(_sage_const_1 ,m+_sage_const_1 ):
        prog.add_constraint(p[i,i] == _sage_const_1 )

# Check if linear combination is odd (1 in GF(2)) or even(0 in GF(2))
for i in range(_sage_const_1 ,m+_sage_const_1 ):
    for j in range(_sage_const_1 ,n+_sage_const_1 ):
        prog.add_constraint(prog.sum(A[k-_sage_const_1 ][j-_sage_const_1 ]*p[i,k] for k in range(_sage_const_1 ,m+_sage_const_1 )) == _sage_const_2 *k[i,j] + b[i,j])

# x linear combination of rows
for i in range(_sage_const_1 ,m+_sage_const_1 ):
    for j in range(_sage_const_1 ,n+_sage_const_1 ):
        prog.add_constraint(x[i,j] == b[i,j]) # Attento a somma


# Objective function
prog.set_objective(_sage_const_0 )

try:
    prog.solve()
    X = Matrix(GF(_sage_const_2 ),m,n)
    P = Matrix(GF(_sage_const_2 ),m,n)

    for i in range(m):
        for j in range(n):
            X[i,j]=prog.get_values(x)[i+_sage_const_1 ,j+_sage_const_1 ]

    for i in range(m):
        for j in range(m):
            P[i,j]=prog.get_values(p)[i+_sage_const_1 ,j+_sage_const_1 ]

    print("=====ORIGINAL MATRIX=====")
    print()
    print(A)
    print()
    print("=====POST-PGE MATRIX=====")
    print()
    print(P*A)
except:
    print("Left {sig} columns rank too low")


